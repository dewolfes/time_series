print("PART 1")
library(tseries)
library(fBasics)
library(zoo)
#Import Data and convert date format
crude <- read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
crude$date=as.Date(as.character(crude$date), format = "%d-%b-%y")
# CREATE TIME SERIEs using ts() function.
#ts(datavector, start=c(year, index), freq=nperiods)
price = crude[,2]
oil = ts(price, start=c(2004,1), freq=52)
price_growth = (oil-lag(oil, k=-1))/lag(oil, k=-1)
crudeoil<-read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
crudeoil$date = as.Date(as.character(crudeoil$date), format = "%d/%m/%y")
crudeoilts = zoo(crudeoil$price, as.Date(as.character(crudeoil$date), format = "%m/%d/y"))
crude <- read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
crudeoil<-read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
crude$date=as.Date(as.character(crude$date), format = "%d-%b-%y")
crudeoil$date = as.Date(as.character(crudeoil$date), format = "%d-%m-%y")
crudeoil<-read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
crudeoil$date = as.Date(as.character(crudeoil$date), format = "%d-%b-%y")
crudeoilts = zoo(crudeoil$price, as.Date(as.character(crudeoil$date), format = "%m/%d/y"))
crude <- read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
crude <- read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
price = crude[,2]
oil = ts(price, start=c(2004,1), freq=52)
price_growth = (oil-lag(oil, k=-1))/lag(oil, k=-1)
crude <- read.table("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
library(tseries)
library(fBasics)
library(zoo)
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
crude <- read.table("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
crude <- read.csv("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv")
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
cisco = read.table("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv", header=T, sep=',')
crude = read.table("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv", header=T, sep=',')
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
crude = read.table("~/Documents/Depaul Courses/CSC425/Hw 1/crudeoil_w0416.csv", header=T, sep=',')
oilts = zoo(crude$price, as.Date(as.character(crude$date), format = "%d-%b-%y"))
etwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/TimeSeries/time_series/Week 1")
```{r}
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
etwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/TimeSeries/time_series/Week 1")
```{r}
library(tseries)
library(zoo)
#import dataset into a dataframe
setwd("/Users/mylesgartland/OneDrive - Rockhurst University/Courses/Forecasting/Time Series/time_series/Week 1")
cisco = read.table('Data/cisco_00-10.csv', header=T, sep=',')
# create time series for cisco prices
ciscots = zoo(cisco$Price, as.Date(as.character(cisco$Date), format = "%m/%d/%y"))
# sort data in chronological order
# set variable Date as time/date variable
cisco$Date=as.Date(as.character(cisco$Date), format = "%m/%d/%y")
cisco=cisco[order(cisco$Date),]
# create lagged series using function lag(tsobject, k==1);
pricelag = lag(ciscots, k=-1);
head(pricelag)
# diff = p_t - p_(t-1);
pricedif = diff(ciscots);
#compute simple returns ret = (p_t-p_(t-1))/p_(t-1)
ret=(ciscots-pricelag)/pricelag
# sort data in chronological order
# set variable Date as time/date variable
cisco$Date=as.Date(as.character(cisco$Date), format = "%m/%d/%y")
cisco=cisco[order(cisco$Date),]
# create lagged series using function lag(tsobject, k==1);
pricelag = lag(ciscots, k=-1);
head(pricelag)
# diff = p_t - p_(t-1);
pricedif = diff(ciscots);
#compute simple returns ret = (p_t-p_(t-1))/p_(t-1)
ret=(ciscots-pricelag)/pricelag
#Example of data analysis for cisco dataset
#DEFINE LOG RETURNS
#rts is a time series object since it is created from a TS object
rts = diff(log(ciscots))
#to retrieve numerical values from time series use coredata()
# rt is a numerical vector (no date information)
rt=coredata(rts)
#print first 6 values
head(rt)
library(fBasics)
# COMPUTE SUMMARY STATISTICS
basicStats(rt)
# CREATE HISTOGRAM
# OPTIONAL creates 2 by 2 display for 4 plots
# par(mfcol=c(2,2))
hist(rt, xlab="Cisco log returns", prob=TRUE, main="Histogram")
# add approximating normal density curve
xfit<-seq(min(rt),max(rt),length=40)
yfit<-dnorm(xfit,mean=mean(rt),sd=sd(rt))
lines(xfit, yfit, col="blue", lwd=2)
# CREATE NORMAL PROBABILITY PLOT
qqnorm(rt)
qqline(rt, col = 2)
# NORMALITY TESTS
# Perform Jarque-Bera normality test.
normalTest(rts,method=c("jb"))
#save default settings
default_par <- par()
library(fma)
par(mfrow=c(2,2))
plot(usdeaths, type = "o", main = "1. Monthly accidental deaths in the US")
plot(internet, type = "o", main = "2. Number of users logged on to an internet server \n each minute over a 100-minute period")
plot(strikes, type = "o", main = "3. Number of Strikes in the US, 1951 - 1980")
plot(hsales2, type = "o", main = "4. Sales of new single family homes \n in the US, Jan 1987 - Nov 1995")
detach("package:fBasics", unload=TRUE)
#save default settings
default_par <- par()
library(fma)
par(mfrow=c(2,2))
plot(usdeaths, type = "o", main = "1. Monthly accidental deaths in the US")
plot(internet, type = "o", main = "2. Number of users logged on to an internet server \n each minute over a 100-minute period")
plot(strikes, type = "o", main = "3. Number of Strikes in the US, 1951 - 1980")
plot(hsales2, type = "o", main = "4. Sales of new single family homes \n in the US, Jan 1987 - Nov 1995")
# COMPUTE ACF AND PLOT CORRELOGRAM
#prints acf values to console
acf(rt, plot=F)
#plot acf values on graph (correlogram)
acf(rt, plot=T)
# CREATE NORMAL PROBABILITY PLOT
qqnorm(rt)
qqline(rt, col = 2)
plot(rt)
?acf
littleacf <- acf(hsales2, main = "Function acf")
library(quantmod)
getSymbols("DJIA", src="FRED")  #-- takes ticker names and pulls data from FRED
class(DJIA)
head(DJIA)
temp <- ts(na.omit(DJIA))
mydj <- ts(temp[1:length(temp)], start = 1)
class(mydj)
head(mydj)
tail(mydj)
plot(mydj, main = "Dow Jones Industrial average \n 28 Aug 2006 - 29 Aug 2017", ylab = "Index")
library(quantmod)
getSymbols("AAPL", src="FRED")  #-- takes ticker names and pulls data from FRED
library(quantmod)
getSymbols("APPL", src="FRED")  #-- takes ticker names and pulls data from FRED
library(quantmod)
getSymbols("APPL", src="YAHOO")  #-- takes ticker names and pulls data from FRED
mydj.short <- window(mydj, start = length(mydj)-250, end = length(mydj)) #note the indexes - you can change this if you want
plot(mydj.short, main = "Dow Jones Industrial average \n 250 trading days ending 29 Aug 2019",  ylab = "Index")
#create the change in the DJ
diff_mydj <- diff(mydj.short)
plot(diff_mydj, main = "Change in daily Dow Jones Industrial average \n 250 trading days ending 26 Aug 2016", ylab = "Change in index")
abline(a=0,b=0, col = "red")
mydj.short <- window(mydj, start = length(mydj)-250, end = length(mydj)) #note the indexes - you can change this if you want
plot(mydj.short, main = "Dow Jones Industrial average \n 250 trading days ending 29 Aug 2017",  ylab = "Index")
#create the change in the DJ
diff_mydj <- diff(mydj.short)
plot(diff_mydj, main = "Change in daily Dow Jones Industrial average \n 250 trading days ending 26 Aug 2016", ylab = "Change in index")
abline(a=0,b=0, col = "red")
mydj.short <- window(mydj, start = length(mydj)-250, end = length(mydj)) #note the indexes - you can change this if you want
plot(mydj.short, main = "Dow Jones Industrial average \n 250 trading days ending 29 Aug 2017",  ylab = "Index")
#create the change in the DJ
diff_mydj <- diff(mydj.short)
plot(diff_mydj, main = "Change in daily Dow Jones Industrial average \n 250 trading days ending 29 Aug 2017", ylab = "Change in index")
abline(a=0,b=0, col = "red")
Acf(diff_mydj)
#now calculate the test statistic
Box.test(diff_mydj, lag=10, fitdf=0, type="Lj")
plot(decompose(hsales))
plot(stl(hsales,s.window="periodic"))
